{
  "__inputs": [
    {
      "name": "DS_SDMENERGY",
      "label": "SDMenergy",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    },
    {
      "name": "DS_TOOL",
      "label": "tool",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    },
    {
      "name": "DS_SDMENERGY_WITH POP SAN",
      "label": "SDMenergy with pop san",
      "description": "",
      "type": "datasource",
      "pluginId": "postgres",
      "pluginName": "PostgreSQL"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "panel",
      "id": "canvas",
      "name": "Canvas",
      "version": ""
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "9.4.3"
    },
    {
      "type": "panel",
      "id": "nline-plotlyjs-panel",
      "name": "Plotly",
      "version": "1.3.0"
    },
    {
      "type": "datasource",
      "id": "postgres",
      "name": "PostgreSQL",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "liveNow": true,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 118,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "#ffdc99"
            },
            "image": {
              "fixed": ""
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "#000000"
                },
                "size": 50,
                "text": {
                  "fixed": "CURRENT VALUE PAGE"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 70,
                "left": 620,
                "top": 11,
                "width": 689.9500122070312
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY}"
          },
          "editorMode": "builder",
          "format": "table",
          "rawSql": "SELECT ipg2211a2n FROM \"Exampletimeseriedata\" LIMIT 50 ",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "ipg2211a2n",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Exampletimeseriedata\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 0,
        "y": 3
      },
      "id": 6,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Gas Flow POS 1"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 53,
                "top": -11,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 5,
        "y": 3
      },
      "id": 68,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Gas Flow POS 2"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 48,
                "top": -9,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 10,
        "y": 3
      },
      "id": 70,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Gas Flow POS 3"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 48,
                "top": -9,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 15,
        "y": 3
      },
      "id": 71,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Gas Flow POS 6"
                },
                "valign": "middle"
              },
              "connections": [],
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 48,
                "top": -9,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY}"
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 20,
        "y": 3
      },
      "id": 148,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<a href=\"http://localhost:3000/d/5cwHgdzSz/power-monitoring-current-value?orgId=1&from=1672531200000&to=1704067199999\">\r\n    <div style=\"text-align: center;\">\r\n        <span style=\"font-weight: bold;\">Current Value</span>\r\n        <br>\r\n        <img src=\"/public/img/value1.png\" alt=\"Clickable Image\">\r\n    </div>\r\n</a>",
        "mode": "html"
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY}"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY}"
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 22,
        "y": 3
      },
      "id": 147,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<a href=\"http://localhost:3000/d/AEZqiXmIz/power-monitoring-history-monitor?orgId=1&from=1672531200000&to=1704067199999\">\r\n    <div style=\"text-align: center;\">\r\n        <span style=\"font-weight: bold;\">History Monitor</span>\r\n        <br>\r\n        <img src=\"/public/img/icons/iot/historyenergy.svg\" alt=\"Clickable Image\">\r\n    </div>\r\n",
        "mode": "html"
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY}"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 0,
        "y": 4
      },
      "id": 152,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 5,
        "y": 4
      },
      "id": 163,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 10,
        "y": 4
      },
      "id": 164,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 15,
        "y": 4
      },
      "id": 165,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY}"
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 20,
        "y": 7
      },
      "id": 150,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<a href=\"http://localhost:3000/d/n7rVmuiSk/power-monitoring-cycle-monitor?orgId=1&from=1672531200000&to=1704067199999\">\r\n    <div style=\"text-align: center;\">\r\n        <span style=\"font-weight: bold;\">Cycle Monitor</span>\r\n        <br>\r\n        <img src=\"/public/img/cycle.png\" alt=\"Clickable Image\">\r\n    </div>\r\n</a>",
        "mode": "html"
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY}"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY}"
      },
      "gridPos": {
        "h": 4,
        "w": 2,
        "x": 22,
        "y": 7
      },
      "id": 149,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<a href=\"http://localhost:3000/d/kgM6NdZSz/power-monitoring-all-line-monitor?orgId=1&from=1672531200000&to=1704067199999\">\r\n    <div style=\"text-align: center;\">\r\n        <span style=\"font-weight: bold;\">All Line monitor</span>\r\n        <br>\r\n        <img src=\"/public/img/all_line.png\" alt=\"Clickable Image\">\r\n    </div>\r\n</a>",
        "mode": "html"
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY}"
          },
          "refId": "A"
        }
      ],
      "type": "text"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 0,
        "y": 10
      },
      "id": 74,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Temp. POS 1"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 53,
                "top": -11,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "index": 0,
                  "text": "Abnormal"
                },
                "1": {
                  "color": "#00000000",
                  "index": 1,
                  "text": "Normal"
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 16,
        "w": 10,
        "x": 5,
        "y": 10
      },
      "id": 66,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "img/image_energylayout.jpg",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                },
                "image": {
                  "field": "",
                  "fixed": "",
                  "mode": "field"
                },
                "size": "cover"
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "fixed": "img/icons/unicons/angry.svg",
                  "mode": "fixed"
                }
              },
              "connections": [],
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 62.000003814697266,
                "left": 456,
                "top": 102,
                "width": 56.000003814697266
              },
              "type": "icon"
            }
          ],
          "name": "Element 1693970512103",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase \r\n\tWHEN (ipg2211a2n > High OR ipg2211a2n < Low) then 0\r\nELSE 1 END AS \"Status\"\r\nFROM \"Exampletimeseriedata\" \r\nwhere $__timeFilter(timestamp)\r\norder by timestamp desc LIMIT 1",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 15,
        "y": 10
      },
      "id": 97,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Gas Flow POS 5"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 48,
                "top": -9,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 0,
        "y": 11
      },
      "id": 169,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 15,
        "y": 11
      },
      "id": 166,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 20,
        "y": 11
      },
      "id": 50,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "#f7eed440"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 22,
                "text": {
                  "fixed": "Flow Sensor"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49.000003814697266,
                "left": 59,
                "top": 10,
                "width": 212.00001525878906
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 13
      },
      "id": 104,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 1"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Flow sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Flow sensor' AND sensor_position = 1",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 'f_1_1' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "targetBlank": true,
              "title": "",
              "url": "http://localhost:3000/d/Ho_CKzgIz/alarm-monitor?orgId=1&from=1692563566913&to=1692585166913"
            }
          ],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 14
      },
      "id": 103,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 2"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Flow sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Flow sensor' AND sensor_position = 2",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 'f_1_2' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 15
      },
      "id": 105,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 3"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Flow sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Flow sensor' AND sensor_position = 3",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 'f_1_3' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 16
      },
      "id": 106,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 4"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Flow sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Flow sensor' AND sensor_position = 4",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 'f_1_4' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 0,
        "y": 17
      },
      "id": 76,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Temp. POS 2"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 53,
                "top": -11,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 15,
        "y": 17
      },
      "id": 99,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Filter Clog"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 48,
                "top": -9,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 17
      },
      "id": 107,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 5"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Flow sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Flow sensor' AND sensor_position = 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 'f_1_5' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 0,
        "y": 18
      },
      "id": 172,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 15,
        "y": 18
      },
      "id": 167,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 18
      },
      "id": 108,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 6"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Flow sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Flow sensor' AND sensor_position = 6",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 'f_1_6' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 20,
        "y": 19
      },
      "id": 114,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "#f7eed440"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 22,
                "text": {
                  "fixed": "Temperature Sensor"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49.000003814697266,
                "left": 36,
                "top": 9,
                "width": 257
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 21
      },
      "id": 109,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 1"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Temperature sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Temperature sensor' AND sensor_position = 1",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 't_1_1' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "red",
                  "icon": "img/icons/marker/x-mark.svg",
                  "index": 0
                },
                "1": {
                  "color": "green",
                  "icon": "img/icons/marker/circle.svg",
                  "index": 1
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 4,
        "x": 20,
        "y": 22
      },
      "id": 110,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            },
            "size": "cover"
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            },
            "width": 0
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "fill": {
                  "field": "Status",
                  "fixed": "#D9D9D9"
                },
                "path": {
                  "field": "Status",
                  "fixed": "",
                  "mode": "field"
                }
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 34,
                "left": 126,
                "top": -3,
                "width": 72
              },
              "type": "icon"
            },
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "rgb(204, 204, 220)"
                },
                "size": 16,
                "text": {
                  "fixed": "Position 2"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 2",
              "placement": {
                "height": 50,
                "left": 10,
                "top": -7,
                "width": 100
              },
              "type": "text"
            }
          ],
          "name": "Element 1692589733717",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT \r\nDISTINCT sensor_position, sensor_type AS \"Temperature sensor\",\r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"S\"\r\nFrom \"Equipment_monitor\"\r\nWhere line = ($Line) AND sensor_type = 'Temperature sensor' AND sensor_position = 2",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT \r\nCase WHEN status = 1 then 1 ELSE 0 END AS \"Status\"\r\nFrom \"sensor_status\"\r\nWhere line_no = ($Line) AND sensor_id = 't_1_2' order by time desc LIMIT 1",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [
                  {
                    "name": "plan",
                    "type": "functionParameter"
                  }
                ],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "\"Plan master\""
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 0,
        "y": 24
      },
      "id": 78,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Gas Flow POS 4"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 53,
                "top": -11,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 15,
        "y": 24
      },
      "id": 101,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Filter Clog"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 48,
                "top": -9,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 0,
        "y": 25
      },
      "id": 173,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 15,
        "y": 25
      },
      "id": 168,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 5,
        "y": 26
      },
      "id": 81,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Wet Scrabber"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 53,
                "top": -11,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_TOOL}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 5,
        "x": 10,
        "y": 26
      },
      "id": 82,
      "options": {
        "inlineEditing": true,
        "root": {
          "background": {
            "color": {
              "fixed": "transparent"
            },
            "image": {
              "fixed": "",
              "mode": "fixed"
            }
          },
          "border": {
            "color": {
              "fixed": "dark-green"
            }
          },
          "constraint": {
            "horizontal": "left",
            "vertical": "top"
          },
          "elements": [
            {
              "background": {
                "color": {
                  "fixed": "transparent"
                }
              },
              "border": {
                "color": {
                  "fixed": "dark-green"
                }
              },
              "config": {
                "align": "center",
                "color": {
                  "fixed": "text"
                },
                "size": 21,
                "text": {
                  "fixed": "Wet Scrabber"
                },
                "valign": "middle"
              },
              "constraint": {
                "horizontal": "left",
                "vertical": "top"
              },
              "name": "Element 1",
              "placement": {
                "height": 49,
                "left": 53,
                "top": -11,
                "width": 268
              },
              "type": "text"
            }
          ],
          "name": "Element 1684978948654",
          "placement": {
            "height": 100,
            "left": 0,
            "top": 0,
            "width": 100
          },
          "type": "frame"
        },
        "showAdvancedTypes": false
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_TOOL}"
          },
          "refId": "A"
        }
      ],
      "type": "canvas"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 5,
        "y": 27
      },
      "id": 170,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "${DS_SDMENERGY_WITH POP SAN}"
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 10,
        "y": 27
      },
      "id": 171,
      "options": {
        "config": {
          "displayModeBar": false
        },
        "data": "",
        "layout": {
          "font": {
            "color": "darkgrey"
          },
          "margin": {
            "b": 40,
            "l": 20,
            "r": 20,
            "t": 5
          },
          "paper_bgcolor": "rgba(0,0,0,0)",
          "plot_bgcolor": "rgba(0,0,0,0)",
          "xaxis": {
            "automargin": true,
            "autorange": true,
            "type": "line"
          },
          "yaxis": {
            "automargin": true,
            "autorange": true,
            "type": "linear"
          }
        },
        "onclick": "// console.log(data);\n// window.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "let High = data.series[0].fields[6].values.buffer;\nlet Highlast = High[High.length - 1];\nlet Low = data.series[0].fields[7].values.buffer;\nlet Lowlast = Low[Low.length - 1];\nlet Average = data.series[0].fields[5].values.buffer;\nlet Averagelast = Average[Average.length - 1];\n\nfunction addRedRectangle() {\n    var parent = document.getElementById(\"parent\");\n    \n    // Check if the 'parent' element exists\n    if (parent !== null) {\n        var rectangle = document.createElement(\"div\");\n\n        rectangle.style.width = \"200px\";\n        rectangle.style.height = \"100px\";\n        rectangle.style.border = \"1px solid red\";\n\n        parent.appendChild(rectangle);\n    } else {\n        console.error(\"Element with id 'parent' not found.\");\n    }\n}\n\nvar stdhigh = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[6].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar stdlow = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[7].values.buffer,\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar scatter = {\n  x: data.series[0].fields[10].values.buffer,\n  y: data.series[0].fields[9].values.buffer,\n  marker: {\n    color: '#055C9D',\n  },\n  type: 'scatter',\n  mode: 'lines+markers', // Using both lines and markers\n  line: {\n    color: 'white', // Set the line color to white\n  },\n  xaxis: 'x1',\n  yaxis: 'y1',\n  domain: { row: 0, column: 0 }\n};\n\nvar trace1 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Averagelast),\n    number: { font: { size: 25, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\" }}, // Set text color conditionally\n    title: { \n        text: Averagelast > Highlast || Averagelast < Lowlast ? \"Abnormal\" : \"Normal\", \n        font: { size: 15, color: Averagelast > Highlast || Averagelast < Lowlast ? \"red\" : \"yellow\", bgcolor: Averagelast > Highlast || Averagelast < Lowlast ? \"yellow\" : \"transparent\" }, // Set background color conditionally\n        yanchor: 'bottom' \n    },\n    domain: { row:0, column:4 }\n};\n\nvar trace2 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Highlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Hi\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:5, column:4 }\n};\n\nvar trace3 = {\n    type: \"indicator\",\n    mode: \"number\",\n    value: String(Lowlast),\n    number: { font: { size: 20 }},\n    title: { text: \"Low\", font: { size: 12 }, yanchor: 'bottom' },\n \n    domain: { row:10, column:4 }\n};\n\n// Assuming your x-axis data is stored in data.series[0].fields[3].values.buffer\nvar xDataPoints = data.series[0].fields[10].values.buffer;\n// Assuming your y-axis data is stored in data.series[0].fields[0].values.buffer\nvar yDataPoints = data.series[0].fields[9].values.buffer;\n\n// An array to store the red rectangles\nvar redRectangles = [];\n\n// Define the xOffset and yOffset as needed\nvar xOffset = 1;\nvar yOffset = 10;\n\n// Loop through the data points and create a red rectangle for each\nfor (var i = 0; i < xDataPoints.length; i++) {\n    var xPoint = xDataPoints[i];\n    var yPoint = yDataPoints[i];\n    \n    // Assuming High and Low are arrays with corresponding values for each data point\n    var currentHigh = High[i];\n    var currentLow = Low[i];\n    \n    var redRectangle = {\n        type: 'rect',\n        x0: xPoint - xOffset, // Adjust x-coordinate as needed\n        x1: xPoint + xOffset, // Adjust x-coordinate as needed\n        y0: yPoint - yOffset, // Adjust y-coordinate as needed\n        y1: yPoint + yOffset, // Adjust y-coordinate as needed\n        fillcolor: 'red',\n        opacity: 0.3, // Adjust opacity as needed\n        line: {\n            width: 0  // Set the border width to 0 to remove the border\n        }\n    };\n    \n    // Check if the condition is met to add the red rectangle for this data point\n    if (yPoint > currentHigh || yPoint < currentLow) {\n        redRectangles.push(redRectangle);\n    }\n}\n\nvar layout = {\n  showlegend: false,\n    font: {\n    color: '#FFFFFF'\n  },\n  grid: { rows: 12, columns: 5, pattern: \"independent\" },\n  margin: { t: 30, b: 5, l: 50, r: 10 },\n  xaxis: {domain: [0, 0.75],gridcolor: 'grey',\n          title: {\n          text: \"Sec\",\n          standoff: 10},},\n  yaxis: {domain: [0.2, 1],   gridcolor: 'grey',\n          title: {\n          text: \"Value\",\n          standoff: 10},},\n  xaxis2: {domain: [0.75, 1],gridcolor: 'grey'},\n    // Add the red rectangle shape to the layout\n    shapes: redRectangles\n};\n  \nreturn {data:[scatter,trace1,trace2,trace3,stdhigh,stdlow],layout:layout };",
        "yaml_mode": true
      },
      "pluginVersion": "9.4.3",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": true,
          "rawQuery": true,
          "rawSql": "SELECT\r\n ipg2211a2n,\r\n High,\r\n Low,\r\n (Row_number() OVER (ORDER BY timestamp DESC) * 2) AS \"Cycle\"\r\nFROM \"Exampletimeseriedata\" \r\norder by timestamp desc LIMIT 5",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "postgres",
            "uid": "${DS_SDMENERGY_WITH POP SAN}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "WITH last_cycle_id AS (\r\n    SELECT cycle_id\r\n    FROM public.raw_energy_line_2\r\n    ORDER BY end_timestamp DESC\r\n    LIMIT 1\r\n)\r\n\r\nSELECT\r\n    t1.cycle_id,\r\n    t1.sensor_id,\r\n    t1.start_timestamp,\r\n    t1.end_timestamp,\r\n    t1.ct,\r\n    t1.average_value,\r\n    t2.high,\r\n    t2.low,\r\n    t1.count_json_array,\r\n    x.val,\r\n    x.timeinterval\r\nFROM\r\n    public.raw_energy_line_2 t1\r\nINNER JOIN\r\n    master_std t2 ON t1.sensor_id = t2.sensor_id\r\nCROSS JOIN LATERAL jsonb_to_recordset(t1.jsonarray) AS x(val float, \"timeinterval\" float)\r\nWHERE\r\n    t1.cycle_id = (SELECT cycle_id FROM last_cycle_id)\r\n    AND t1.line_no = $Line\r\nORDER BY\r\n    t1.end_timestamp;",
          "refId": "B",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Latest cycle",
      "type": "nline-plotlyjs-panel"
    }
  ],
  "refresh": "",
  "revision": 1,
  "schemaVersion": 38,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "postgres",
          "uid": "${DS_SDMENERGY}"
        },
        "definition": "SELECT   DISTINCT ON (line) line\n\tFROM public.\"Equipment_monitor\" ",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "Line",
        "options": [],
        "query": "SELECT   DISTINCT ON (line) line\n\tFROM public.\"Equipment_monitor\" ",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Power monitoring - Current value",
  "uid": "5cwHgdzSz",
  "version": 149,
  "weekStart": ""
}